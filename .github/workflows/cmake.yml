name: CI

on: [push, pull_request]

#env:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          #- runs-on: ubuntu-20.04
          #  build_type: Release
          #  cxx: g++-9

          - runs-on: ubuntu-20.04
            build_type: Release
            cxx: g++-9
            cc: gcc-9
            fc: gfortran-9
            args: >
              -DENABLE_FORTRAN=ON

          #- runs-on: macos-latest
          #  build_type: Release
          #  cxx: clang++

          #- runs-on: macos-latest
          #  build_type: Debug
          #  cxx: clang++
          #  args: >
          #    -DENABLE_FORTRAN=ON

          #- runs-on: windows-2022
          #  build_type: Release
          #  cxx: clang-cl
          #  args: >
          #    -DPYBIND11_FINDPYTHON=ON
          #    -DCMAKE_CXX_FLAGS="-D_=1"

          - runs-on: windows-2022
            build_type: Release
            cxx: clang-cl
            cc: clang-cl
            args: >
              -DCMAKE_C_COMPILER=clang-cl

            #  -DCMAKE_CXX_FLAGS="-D_=1"

            #cxx: /usr/bin/g++-9

        #-DCMAKE_PREFIX_PATH=/usr/local/Cellar/eigen/3.3.9

    name: "${{ matrix.cfg.runs-on }} • ${{ matrix.cfg.cxx }} • ${{ matrix.cfg.build_type }} • ${{ matrix.cfg.args }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    env:
      CXX : ${{ matrix.cfg.cxx }}
      CCACHE_DIR : ${{github.workspace}}/build/.ccache
      CCACHE_COMPRESS : true
      CCACHE_COMPRESSLEVEL : 6
      BUILD_CONFIG : >
        -G Ninja
        -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -DMPIEXEC_PREFLAGS='--bind-to;none;--allow-run-as-root'
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/installed
        -DWITH_MAX_AM=3;2
        -DWITH_ERI_MAX_AM=2;2
        -DWITH_ERI3_MAX_AM=3;2
        -DENABLE_ERI=1
        -DENABLE_ERI3=1
        -DENABLE_ONEBODY=1
        -DDISABLE_ONEBODY_PROPERTY_DERIVS=ON
        -DMULTIPOLE_MAX_ORDER=2
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

    steps:
    - uses: actions/checkout@v2

    - id: skip_check
      name: Check if can skip
      uses: fkirc/skip-duplicate-actions@v3.4.0
      with:
        cancel_others: 'true'

    - name: Create Build Environment
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      # N.B. can't seem to create ${{github.workspace}}/install for some reason, use 'installed'
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/test_installed_library
        cmake -E make_directory ${{github.workspace}}/installed

    - name: Install prerequisite MacOS packages
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'macOS' }}
      run: |
        brew install ninja gcc@10 boost eigen ccache
        #echo "FC=/usr/local/bin/gfortran-10" >> $GITHUB_ENV
        #echo "EIGEN3_INCLUDE_DIR=/usr/local/include/eigen3" >> $GITHUB_ENV

    - name: Install prerequisites Ubuntu packages
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Linux' }}
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build ${{ matrix.cfg.cxx }} ${{ matrix.cfg.fc }} liblapack-dev libmpfr-dev libboost-dev libeigen3-dev ccache
        #echo "FC=/usr/bin/gfortran-9" >> $GITHUB_ENV
        #echo "EIGEN3_INCLUDE_DIR=/usr/include/eigen3" >> $GITHUB_ENV

    - name: Install Windows prerequisites, part 1, Create Conda Environment
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ""
        add-pip-as-python-dependency: true
        auto-activate-base: true
        conda-build-version: "*"
        show-channel-urls: true

    # Note: `shell: bash -l {0}` makes Miniconda created above for Windows available to
    #   subsequent steps. see https://github.com/conda-incubator/setup-miniconda#usage-examples

    - name: Install Windows prerequisites, part 2, Environment Information
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      shell: bash -l {0}
      run: |
        conda info
        conda install ninja cmake python mpir boost eigen ccache -c conda-forge --yes
        conda list

    - name: Prepare compiler environment for Windows
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Prepare ccache timestamp
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")

    - name: Setup ccache cache files
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      uses: actions/cache@v1.1.0
      with:
        path: ${{github.workspace}}/build/.ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Generate+build Libint library (ExternalProject)
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && matrix.cfg.build_type != 'Debug'}}
      shell: bash -l {0}
      working-directory: ${{github.workspace}}
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} $BUILD_CONFIG ${{ matrix.cfg.args }}
        cmake --build build
        cmake --build build --target check-libint2compiler
        cmake --build build --target install

    - name: Generate+build Libint library (FetchContent)
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && matrix.cfg.build_type == 'Debug'}}
      shell: bash
      working-directory: ${{github.workspace}}
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} -DLIBINT_BUILD_LIBRARY_AS_SUBPROJECT=ON $BUILD_CONFIG ${{ matrix.cfg.args }}
        cmake --build build --target libint-library-export
        cmake --build build --target check-libint2compiler
        cmake --build build --target check-libint2
        cmake --build build --target install
        #cd src/bin/test_eri && ./stdtests.pl && cd ../../..

    - name: Test installed Libint library
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      shell: bash -l {0}
      working-directory: ${{github.workspace}}/test_installed_library
      run: |
        cat > CMakeLists.txt <<EOF
        cmake_minimum_required(VERSION 3.18)
        project(hfpp)
        message("CMAKE_BUILD_TYPE \${CMAKE_BUILD_TYPE}")
        message("CMAKE_PREFIX_PATH \${CMAKE_PREFIX_PATH}")
        message("Libint2_DIR \${Libint2_DIR}")
        find_package(Libint2 REQUIRED COMPONENTS eri_c4_d0_l2 CXX_ho)
        find_package(Threads)  # clang does not autolink threads even though we are using std::thread
        set(_src2 "${{github.workspace}}/src/lib/libint/tests/hartree-fock/hartree-fock-cpp.cc")
        message("_src2 \${_src2}")
        file(TO_CMAKE_PATH "\${_src2}" _hf_src2)
        message("_hf_src2 \${_hf_src2}")
        add_executable(hfpp EXCLUDE_FROM_ALL \${_hf_src2})
        target_link_libraries(hfpp Libint2::cxx Threads::Threads)
        EOF
        cat CMakeLists.txt
        cmake -S . -B build -D Libint2_DIR="${{github.workspace}}\installed\lib\cmake\libint2" -D CMAKE_PREFIX_PATH="${{github.workspace}}/installed" -D CMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }}
        cmake --build build --target hfpp
        ./build/hfpp ${{github.workspace}}/src/lib/libint/tests/hartree-fock/h2o_rotated.xyz | python ${{github.workspace}}/src/lib/libint/tests/hartree-fock/hartree-fock-cpp-validate.py ${{github.workspace}}/build/libint-2*/features
