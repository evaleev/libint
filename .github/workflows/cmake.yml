name: CI

on: [push, pull_request]

jobs:
  build_repo:
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - runs-on: ubuntu-latest
            build_type: Release
            cxx: g++-9
            cc: gcc-9
            fc: gfortran-9
            args: >
              -DENABLE_FORTRAN=ON

          - runs-on: macos-latest
            build_type: Release
            cxx: clang++
            cc: clang
            args: >
              -DENABLE_FORTRAN=ON
              -DCMAKE_Fortran_COMPILER=gfortran-10

          - runs-on: windows-2022
            build_type: Release
            cxx: clang-cl
            cc: clang-cl
            args: ""

          - runs-on: ubuntu-20.04
            build_type: Debug
            cxx: g++-9
            cc: gcc-9
            fc: gfortran-9
            args: >
              -DENABLE_FORTRAN=ON

          - runs-on: macos-latest
            build_type: Debug
            cxx: clang++
            cc: clang
            args: >
              -DENABLE_FORTRAN=ON
              -DCMAKE_Fortran_COMPILER=gfortran-10

    name: "Repo • ${{ matrix.cfg.runs-on }} • ${{ matrix.cfg.cxx }} • ${{ matrix.cfg.build_type }} • ${{ matrix.cfg.args }}"
    runs-on: ${{ matrix.cfg.runs-on }}
    env:
      CXX : ${{ matrix.cfg.cxx }}
      CC : ${{ matrix.cfg.cc }}
      CCACHE_DIR : ${{github.workspace}}/build/.ccache
      CCACHE_COMPRESS : true
      CCACHE_COMPRESSLEVEL : 6
      BUILD_CONFIG : >
        -GNinja
        -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -DMPIEXEC_PREFLAGS='--bind-to;none;--allow-run-as-root'
        -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/installed
        -DWITH_MAX_AM=3;2
        -DWITH_ERI_MAX_AM=2;2
        -DWITH_ERI3_MAX_AM=3;2
        -DENABLE_ERI=1
        -DENABLE_ERI3=1
        -DENABLE_ONEBODY=1
        -DDISABLE_ONEBODY_PROPERTY_DERIVS=ON
        -DMULTIPOLE_MAX_ORDER=2
        -DENABLE_PYTHON=ON
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}

    steps:
    - uses: actions/checkout@v3

    - id: skip_check
      name: Check if can skip
      uses: fkirc/skip-duplicate-actions@v5
      with:
        cancel_others: 'true'

    - name: Create Build Environment
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      # N.B. can't seem to create ${{github.workspace}}/install for some reason, use 'installed'
      run: |
        cmake -E make_directory ${{github.workspace}}/build
        cmake -E make_directory ${{github.workspace}}/test_installed_library
        cmake -E make_directory ${{github.workspace}}/installed

    - name: Install MacOS prerequisites
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'macOS' }}
      run: |
        brew install ninja gcc@10 boost eigen ccache python3 numpy scipy

    - name: Install Ubuntu prerequisites
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Linux' }}
      run: |
        sudo apt-get update
        sudo apt-get install ninja-build ${{ matrix.cfg.cxx }} ${{ matrix.cfg.fc }} liblapack-dev libmpfr-dev libboost-dev libeigen3-dev ccache python3-numpy python3-scipy

    - name: Install Windows prerequisites, part 1, Create Conda Environment
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ""
        add-pip-as-python-dependency: true
        auto-activate-base: true
        show-channel-urls: true
        miniforge-variant: Mambaforge
        use-mamba: true
        channels: conda-forge
        #conda-build-version: "*"

    # Note: `shell: bash -l {0}` makes Miniconda created above for Windows available to
    #   subsequent steps. see https://github.com/conda-incubator/setup-miniconda#usage-examples

    - name: Install Windows prerequisites, part 2, Environment Information
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      shell: bash -l {0}
      run: |
        conda info
        conda install ninja cmake python mpir boost eigen ccache -c conda-forge --yes
        conda list

    - name: Prepare compiler environment for Windows
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Prepare ccache timestamp
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("\"timestamp=${current_date}\" >> $GITHUB_OUTPUT")

    - name: Setup ccache cache files
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/build/.ccache
        key: ${{ matrix.config.name }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
        restore-keys: |
          ${{ matrix.config.name }}-ccache-

    - name: Generate & Build Libint Library (ExternalProject, cplr tests)
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && matrix.cfg.build_type != 'Debug'}}
      shell: bash -l {0}
      working-directory: ${{github.workspace}}
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} $BUILD_CONFIG ${{ matrix.cfg.args }}
        #cmake --build build --target export  # toggle for quick tarball to debug `build_export`
        cmake --build build --target library check-libint2compiler install
        cd build && echo "ARTIFACT=`ls -1 libint*tgz`" >> $GITHUB_ENV

    - name: Generate & Build Libint Library (FetchContent, full tests)
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && matrix.cfg.build_type == 'Debug'}}
      shell: bash -l {0}
      working-directory: ${{github.workspace}}
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} -DLIBINT_BUILD_LIBRARY_AS_SUBPROJECT=ON -DPYTHON_EXECUTABLE=`which python3` $BUILD_CONFIG ${{ matrix.cfg.args }}
        cmake --build build --target export
        cmake --build build --target check-libint2compiler
        cmake --build build --target check-libint2
        cmake --build build --target install

    - name: Archive Library Tarball
      if: ${{ steps.skip_check.outputs.should_skip != 'true' && matrix.cfg.build_type == 'Release'}}
      uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: ${{ runner.os }}-${{ matrix.cfg.cxx }}
        path: build/${{ env.ARTIFACT }}
        retention-days: 1

    - name: Test Installed Libint Library
      #if: false  # toggle for quick tarball to debug `build_export`
      if: ${{ steps.skip_check.outputs.should_skip != 'true' }}
      shell: bash -l {0}
      working-directory: ${{github.workspace}}/test_installed_library
      run: |
        cat > CMakeLists.txt <<EOF
        cmake_minimum_required(VERSION 3.16)
        project(hf++)
        message("CMAKE_PREFIX_PATH \${CMAKE_PREFIX_PATH}")
        find_package(Libint2 REQUIRED COMPONENTS eri_c4_d0_l2 CXX_ho)
        find_package(Threads)  # clang does not autolink threads even though we are using std::thread
        add_executable(hf++ EXCLUDE_FROM_ALL "../src/lib/libint/tests/hartree-fock/hartree-fock++.cc")
        target_link_libraries(hf++ Libint2::cxx Threads::Threads)
        EOF
        cat CMakeLists.txt
        cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.cfg.build_type }} -DCMAKE_PREFIX_PATH="${{github.workspace}}/installed"
        cmake --build build --target hf++
        if [[ "${{ runner.os }}" != "Windows" ]]; then
          # xfail for Windows. SCF is wrong (see below), but we ensure that L2@Win builds, exports, packages ok.
          ./build/hf++ ../src/lib/libint/tests/hartree-fock/h2o_rotated.xyz | python ../src/lib/libint/tests/hartree-fock/hartree-fock++-validate.py ../build/libint-2*/features
        fi

# Notes on Windows:
# * Windows with BUILD_SHARED_LIBS=ON compiles just fine but can't link against. See https://github.com/evaleev/libint/issues/237
#
# * Windows with Release and ExternalProject compiles just fine, but its hf++ SCF answer is -1115 E_h. See https://github.com/evaleev/libint/issues/235
#
# * Windows with CMAKE_BUILD_TYPE=Debug gives errors like:
#   ```
#   In file included from D:\a\libint\libint\installed\include\libint2/diis.h:368:
#   D:\a\libint\libint\installed\include\libint2/./engine.h(471,3): error: constructor for 'libint2::Engine' must explicitly initialize the member 'targets_' which does not have a default constructor
#   ```
# * Windows+Ninja with FetchContent sequence gives errors like:
#   ```
#   "ninja: error: failed recompaction: Permission denied"
#   ```
#   This is known issue https://gitlab.kitware.com/cmake/cmake/-/issues/20274
#   that should be ok with CMake 3.20+ and Ninja 1.10.2+ (which we have) but broken c. Feb 2022
#

  # for efficient debug of `build_export` job, in `build_repo` job above:
  # * comment out all but a single Linux/Release in matrix.cfg
  # * toggle to "export" target rather than "library" target in EP step
  # * comment out the "hf++" step
  build_export:
    needs: build_repo
    strategy:
      fail-fast: false
      matrix:
        cfg:
          - runs-on: ubuntu-latest
            libargs: >
              -DBUILD_SHARED_LIBS=ON
              -DLIBINT_LOCAL_Eigen3_INSTALL=ON
              -DEigen3_ROOT="/usr/share/miniconda3/envs/onlyeigen/"
            testargs: >
              -DLIBINT_LOCAL_Eigen3_FIND=ON
            # note full paths depend on setup-miniconda:
            # * Miniforge is miniconda3 vs. Miniconda is miniconda

          - runs-on: macos-latest
            libargs: >
              -DBUILD_SHARED_LIBS=ON
            testargs: ""

          - runs-on: windows-latest
            libargs: >
              -GNinja
              -DCMAKE_BUILD_TYPE=Release
              -DBUILD_SHARED_LIBS=OFF
              -DCMAKE_CXX_COMPILER=clang-cl
              -DCMAKE_C_COMPILER=clang-cl
            testargs: >
              -GNinja
              -DCMAKE_BUILD_TYPE=Release
              -DCMAKE_CXX_COMPILER=clang-cl
              -DCMAKE_C_COMPILER=clang-cl

    name: "Export • ${{ matrix.cfg.runs-on }} • ${{ matrix.cfg.libargs }}"
    runs-on: ${{ matrix.cfg.runs-on }}

    steps:
    # Note we're not checking out the repo. All src from Linux tarball generated above.

    - name: Write a Conda Env File
      shell: bash -l {0}
      run: |
        cat > export.yaml <<EOF
        name: test
        channels:
          - conda-forge
        dependencies:
          - cmake
          - ninja
          - cxx-compiler
          - python
          - boost
          - eigen
          - numpy
          - scipy
          - pybind11
        EOF
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          sed -i "s/- cxx/#- cxx/g" export.yaml
        fi
        cat export.yaml

    - name: Create Conda Environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        use-mamba: true
        python-version: "3.9"
        activate-environment: test
        channels: conda-forge
        environment-file: export.yaml
        show-channel-urls: true

    # Step is unnecessary; remove for debugging.
    - name: Confound Environment - test bundled Boost & fetched pybind11
      if: ${{ runner.os == 'macOS' }}
      shell: bash -l {0}
      run: conda remove boost pybind11

    # Step is unnecessary; remove for debugging.
    - name: Confound Environment - test non-cmake-installed Eigen
      if: ${{ runner.os == 'Windows' }}
      shell: bash -l {0}
      run: rm -rf "${CONDA_PREFIX}/Library/share/eigen3/cmake/"

    # Step is unnecessary; remove step and 3 "*Eigen3*" options in matrix for debugging.
    - name: Confound Environment - test handed-off Eigen
      if: ${{ runner.os == 'Linux' }}
      shell: bash -l {0}
      run: |
        conda remove eigen
        conda create -n onlyeigen eigen -c conda-forge

    - name: Environment Information
      shell: bash -l {0}
      run: |
        conda info
        conda list

    - name: Prepare compiler environment for Windows
      if: ${{ runner.os == 'Windows' }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - uses: actions/download-artifact@v3
      with:
        name: Linux-g++-9

    - name: Extract, Build, Install Libint Library
      shell: bash -l {0}
      run: |
        tar -zxf libint*tgz
        mkdir libint && mv libint-2*/* libint/ && cd libint/
        cmake \
          -S. \
          -Bbuild \
          -DCMAKE_INSTALL_PREFIX="${{github.workspace}}/installed" \
          -DCMAKE_CXX_COMPILER=${CXX} \
          -DENABLE_PYTHON=ON \
          -DCMAKE_PREFIX_PATH="${CONDA_PREFIX}" \
          ${{ matrix.cfg.libargs }}
        cmake --build build --target install

    - name: Test Installed Libint library
      shell: bash -l {0}
      run: |
        mkdir test_installed_library && cd test_installed_library
        cat > CMakeLists.txt <<EOF
        cmake_minimum_required(VERSION 3.16)
        project(hf++)
        find_package(Libint2 REQUIRED COMPONENTS eri_c4_d0_l2 CXX_ho)
        find_package(Threads)  # clang does not autolink threads even though we are using std::thread
        add_executable(hf++ EXCLUDE_FROM_ALL "../libint/tests/hartree-fock/hartree-fock++.cc")
        target_link_libraries(hf++ Libint2::cxx Threads::Threads)
        EOF
        cmake -S . -B build -DCMAKE_PREFIX_PATH="${{github.workspace}}/installed" ${{ matrix.cfg.testargs }}
        cmake --build build --target hf++
        ./build/hf++ ../libint/tests/hartree-fock/h2o_rotated.xyz | python ../libint/tests/hartree-fock/hartree-fock++-validate.py ../libint/features

    - name: Build (again) & Test Python bindings
      shell: bash -l {0}
      working-directory: ${{github.workspace}}/libint/python
      run: |
        cmake . -D ENABLE_PYTHON=ON -D CMAKE_PREFIX_PATH="${{github.workspace}}/installed" ${{ matrix.cfg.testargs }}
        cmake --build . --target libint2-python
        cmake --build . --target libint2-python-test

